2024/07/02 19:22:48 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.0 (default, Dec 15 2023, 12:09:23) [GCC 12.3.0]
    CUDA available: False
    MUSA available: False
    numpy_random_seed: 0
    GCC: gcc (Ubuntu 12.3.0-1ubuntu1~23.04) 12.3.0
    PyTorch: 2.3.1+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    OpenCV: 4.10.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: True
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/07/02 19:22:49 - mmengine - INFO - Config:
crop_size = (
    512,
    512,
)
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        1024,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = '../data/dataset/mmseg_orga/cropped'
dataset_type = 'SkyDetectionDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=3, type='CheckpointHook'),
    logger=dict(interval=4, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
load_from = '../data/pretrained_models/fcn_unet_s5-d16_4x4_512x1024_160k_cityscapes_20211210_145204-6860854e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    auxiliary_head=dict(
        align_corners=False,
        channels=64,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=128,
        in_index=3,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='BN'),
        num_classes=2,
        num_convs=1,
        out_channels=2,
        type='FCNHead'),
    backbone=dict(
        act_cfg=dict(type='ReLU'),
        base_channels=64,
        conv_cfg=None,
        dec_dilations=(
            1,
            1,
            1,
            1,
        ),
        dec_num_convs=(
            2,
            2,
            2,
            2,
        ),
        downsamples=(
            True,
            True,
            True,
            True,
        ),
        enc_dilations=(
            1,
            1,
            1,
            1,
            1,
        ),
        enc_num_convs=(
            2,
            2,
            2,
            2,
            2,
        ),
        in_channels=3,
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=False,
        num_stages=5,
        strides=(
            1,
            1,
            1,
            1,
            1,
        ),
        type='UNet',
        upsample_cfg=dict(type='InterpConv'),
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=64,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=64,
        in_index=4,
        loss_decode=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='BN'),
        num_classes=2,
        num_convs=1,
        out_channels=2,
        type='FCNHead'),
    pretrained=None,
    test_cfg=dict(crop_size=(
        512,
        512,
    ), mode='slide', stride=(
        170,
        170,
    )),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='BN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
randomness = dict(seed=0)
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(img_path='img_dir/test', seg_map_path='ann_dir/test'),
        data_root='../data/dataset/mmseg_orga/cropped',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                512,
                512,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='SkyDetectionDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        512,
        512,
    ), type='Resize'),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(max_iters=16, type='IterBasedTrainLoop', val_interval=2)
train_dataloader = dict(
    batch_size=8,
    dataset=dict(
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        data_root='../data/dataset/mmseg_orga/cropped',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(keep_ratio=True, scale=(
                512,
                512,
            ), type='Resize'),
            dict(
                degree=180,
                pad_val=0,
                prob=1,
                seg_pad_val=0,
                type='RandomRotate'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='SkyDetectionDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(keep_ratio=True, scale=(
        512,
        512,
    ), type='Resize'),
    dict(degree=180, pad_val=0, prob=1, seg_pad_val=0, type='RandomRotate'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(img_path='img_dir/test', seg_map_path='ann_dir/test'),
        data_root='../data/dataset/mmseg_orga/cropped',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                512,
                512,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='SkyDetectionDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../data/Training/0702-1922'

2024/07/02 19:22:49 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/07/02 19:22:49 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/07/02 19:22:50 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Name of parameter - Initialization information

backbone.encoder.0.0.convs.0.conv.weight - torch.Size([64, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.0.0.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.0.0.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.0.0.convs.1.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.0.0.convs.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.0.0.convs.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.0.conv.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.1.1.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.1.1.convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.1.1.convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.0.conv.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.2.1.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.2.1.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.2.1.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.0.conv.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.3.1.convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.1.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.3.1.convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.3.1.convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.0.conv.weight - torch.Size([1024, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.4.1.convs.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.1.conv.weight - torch.Size([1024, 1024, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.encoder.4.1.convs.1.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.encoder.4.1.convs.1.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.0.conv.weight - torch.Size([64, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.0.conv_block.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.1.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.0.conv_block.convs.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.conv_block.convs.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.upsample.interp_upsample.1.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.0.upsample.interp_upsample.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.0.upsample.interp_upsample.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.0.conv.weight - torch.Size([128, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.1.conv_block.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.1.conv_block.convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.conv_block.convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.upsample.interp_upsample.1.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.1.upsample.interp_upsample.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.1.upsample.interp_upsample.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.0.conv.weight - torch.Size([256, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.2.conv_block.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.2.conv_block.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.conv_block.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.upsample.interp_upsample.1.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.2.upsample.interp_upsample.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.2.upsample.interp_upsample.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.0.conv.weight - torch.Size([512, 1024, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.3.conv_block.convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.1.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.3.conv_block.convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.conv_block.convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.upsample.interp_upsample.1.conv.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.decoder.3.upsample.interp_upsample.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.decoder.3.upsample.interp_upsample.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([2, 64, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.convs.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([2, 64, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([64, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2024/07/02 19:22:51 - mmengine - INFO - Load checkpoint from ../data/pretrained_models/fcn_unet_s5-d16_4x4_512x1024_160k_cityscapes_20211210_145204-6860854e.pth
2024/07/02 19:22:51 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/07/02 19:22:51 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/07/02 19:22:51 - mmengine - INFO - Checkpoints will be saved to /home/max/APH/solar_estimation/mmsegmentation/solar_estimation/data/Training/0702-1922.
2024/07/02 19:23:47 - mmengine - INFO - Iter(val) [ 4/84]    eta: 0:02:24  time: 1.8034  data_time: 0.0570  
2024/07/02 19:23:54 - mmengine - INFO - Iter(val) [ 8/84]    eta: 0:02:14  time: 1.7655  data_time: 0.0343  
2024/07/02 19:24:01 - mmengine - INFO - Iter(val) [12/84]    eta: 0:02:07  time: 1.7469  data_time: 0.0116  
2024/07/02 19:24:08 - mmengine - INFO - Iter(val) [16/84]    eta: 0:01:59  time: 1.7534  data_time: 0.0115  
2024/07/02 19:24:15 - mmengine - INFO - Iter(val) [20/84]    eta: 0:01:52  time: 1.7665  data_time: 0.0116  
2024/07/02 19:24:23 - mmengine - INFO - Iter(val) [24/84]    eta: 0:01:46  time: 1.7711  data_time: 0.0118  
2024/07/02 19:24:30 - mmengine - INFO - Iter(val) [28/84]    eta: 0:01:38  time: 1.7687  data_time: 0.0119  
2024/07/02 19:24:37 - mmengine - INFO - Iter(val) [32/84]    eta: 0:01:31  time: 1.7711  data_time: 0.0123  
2024/07/02 19:24:44 - mmengine - INFO - Iter(val) [36/84]    eta: 0:01:24  time: 1.7614  data_time: 0.0128  
2024/07/02 19:24:51 - mmengine - INFO - Iter(val) [40/84]    eta: 0:01:17  time: 1.7653  data_time: 0.0128  
2024/07/02 19:24:58 - mmengine - INFO - Iter(val) [44/84]    eta: 0:01:10  time: 1.7720  data_time: 0.0129  
2024/07/02 19:25:05 - mmengine - INFO - Iter(val) [48/84]    eta: 0:01:03  time: 1.7758  data_time: 0.0131  
2024/07/02 19:25:12 - mmengine - INFO - Iter(val) [52/84]    eta: 0:00:56  time: 1.7716  data_time: 0.0135  
2024/07/02 19:25:19 - mmengine - INFO - Iter(val) [56/84]    eta: 0:00:49  time: 1.7702  data_time: 0.0132  
2024/07/02 19:25:26 - mmengine - INFO - Iter(val) [60/84]    eta: 0:00:42  time: 1.7782  data_time: 0.0135  
2024/07/02 19:25:34 - mmengine - INFO - Iter(val) [64/84]    eta: 0:00:35  time: 1.8655  data_time: 0.0139  
2024/07/02 19:25:42 - mmengine - INFO - Iter(val) [68/84]    eta: 0:00:28  time: 1.9479  data_time: 0.0143  
2024/07/02 19:25:50 - mmengine - INFO - Iter(val) [72/84]    eta: 0:00:21  time: 1.9437  data_time: 0.0137  
2024/07/02 19:25:57 - mmengine - INFO - Iter(val) [76/84]    eta: 0:00:14  time: 1.8182  data_time: 0.0130  
2024/07/02 19:26:02 - mmengine - INFO - Iter(val) [80/84]    eta: 0:00:07  time: 1.6060  data_time: 0.0101  
2024/07/02 19:26:08 - mmengine - INFO - Iter(val) [84/84]    eta: 0:00:00  time: 1.4654  data_time: 0.0070  
2024/07/02 19:26:08 - mmengine - INFO - per class results:
2024/07/02 19:26:08 - mmengine - INFO - 
+--------+-------+-------+
| Class  |  IoU  |  Acc  |
+--------+-------+-------+
|  sky   | 66.77 | 99.26 |
| nonsky |  2.16 |  2.19 |
+--------+-------+-------+
2024/07/02 19:26:08 - mmengine - INFO - Iter(val) [84/84]    aAcc: 67.0100  mIoU: 34.4600  mAcc: 50.7200  data_time: 0.0141  time: 1.7563
2024/07/02 19:26:33 - mmengine - INFO - Saving checkpoint at 3 iterations
2024/07/02 19:27:00 - mmengine - INFO - Iter(train) [ 4/16]  lr: 9.9998e-03  eta: 0:05:05  time: 25.4607  data_time: 0.1648  loss: 0.9372  decode.loss_ce: 0.6668  decode.acc_seg: 64.8561  aux.loss_ce: 0.2704  aux.acc_seg: 64.8561
2024/07/02 19:27:07 - mmengine - INFO - Iter(val) [ 4/84]    eta: 0:02:24  time: 1.5598  data_time: 0.0157  
2024/07/02 19:27:14 - mmengine - INFO - Iter(val) [ 8/84]    eta: 0:02:16  time: 1.7140  data_time: 0.0190  
2024/07/02 19:27:21 - mmengine - INFO - Iter(val) [12/84]    eta: 0:02:08  time: 1.7818  data_time: 0.0129  
2024/07/02 19:27:29 - mmengine - INFO - Iter(val) [16/84]    eta: 0:02:01  time: 1.7766  data_time: 0.0131  
2024/07/02 19:27:36 - mmengine - INFO - Iter(val) [20/84]    eta: 0:01:54  time: 1.7745  data_time: 0.0132  
2024/07/02 19:27:43 - mmengine - INFO - Iter(val) [24/84]    eta: 0:01:47  time: 1.7789  data_time: 0.0129  
2024/07/02 19:27:50 - mmengine - INFO - Iter(val) [28/84]    eta: 0:01:39  time: 1.7849  data_time: 0.0126  
2024/07/02 19:27:57 - mmengine - INFO - Iter(val) [32/84]    eta: 0:01:32  time: 1.7913  data_time: 0.0128  
2024/07/02 19:28:04 - mmengine - INFO - Iter(val) [36/84]    eta: 0:01:25  time: 1.7968  data_time: 0.0129  
2024/07/02 19:28:12 - mmengine - INFO - Iter(val) [40/84]    eta: 0:01:18  time: 1.8059  data_time: 0.0129  
2024/07/02 19:28:19 - mmengine - INFO - Iter(val) [44/84]    eta: 0:01:11  time: 1.8028  data_time: 0.0128  
2024/07/02 19:28:26 - mmengine - INFO - Iter(val) [48/84]    eta: 0:01:04  time: 1.8040  data_time: 0.0127  
2024/07/02 19:28:33 - mmengine - INFO - Iter(val) [52/84]    eta: 0:00:57  time: 1.7935  data_time: 0.0126  
2024/07/02 19:28:41 - mmengine - INFO - Iter(val) [56/84]    eta: 0:00:50  time: 1.8132  data_time: 0.0128  
2024/07/02 19:28:48 - mmengine - INFO - Iter(val) [60/84]    eta: 0:00:43  time: 1.8266  data_time: 0.0131  
2024/07/02 19:28:55 - mmengine - INFO - Iter(val) [64/84]    eta: 0:00:35  time: 1.8286  data_time: 0.0132  
2024/07/02 19:29:02 - mmengine - INFO - Iter(val) [68/84]    eta: 0:00:28  time: 1.8255  data_time: 0.0131  
2024/07/02 19:29:10 - mmengine - INFO - Iter(val) [72/84]    eta: 0:00:21  time: 1.8188  data_time: 0.0137  
2024/07/02 19:29:17 - mmengine - INFO - Iter(val) [76/84]    eta: 0:00:14  time: 1.8034  data_time: 0.0140  
2024/07/02 19:29:23 - mmengine - INFO - Iter(val) [80/84]    eta: 0:00:07  time: 1.6631  data_time: 0.0112  
2024/07/02 19:29:28 - mmengine - INFO - Iter(val) [84/84]    eta: 0:00:00  time: 1.5159  data_time: 0.0077  
2024/07/02 19:29:28 - mmengine - INFO - per class results:
2024/07/02 19:29:28 - mmengine - INFO - 
+--------+-------+-------+
| Class  |  IoU  |  Acc  |
+--------+-------+-------+
|  sky   | 66.78 | 100.0 |
| nonsky |  0.0  |  0.0  |
+--------+-------+-------+
2024/07/02 19:29:28 - mmengine - INFO - Iter(val) [84/84]    aAcc: 66.7800  mIoU: 33.3900  mAcc: 50.0000  data_time: 0.0133  time: 1.7631
2024/07/02 19:30:18 - mmengine - INFO - Saving checkpoint at 6 iterations
2024/07/02 19:30:26 - mmengine - INFO - Iter(val) [ 4/84]    eta: 0:02:24  time: 1.5858  data_time: 0.0165  
2024/07/02 19:30:33 - mmengine - INFO - Iter(val) [ 8/84]    eta: 0:02:16  time: 1.7215  data_time: 0.0202  
2024/07/02 19:30:40 - mmengine - INFO - Iter(val) [12/84]    eta: 0:02:08  time: 1.7886  data_time: 0.0142  
2024/07/02 19:30:47 - mmengine - INFO - Iter(val) [16/84]    eta: 0:02:01  time: 1.7889  data_time: 0.0137  
2024/07/02 19:30:55 - mmengine - INFO - Iter(val) [20/84]    eta: 0:01:54  time: 1.7932  data_time: 0.0134  
2024/07/02 19:31:02 - mmengine - INFO - Iter(val) [24/84]    eta: 0:01:47  time: 1.8033  data_time: 0.0134  
2024/07/02 19:31:09 - mmengine - INFO - Iter(val) [28/84]    eta: 0:01:40  time: 1.8107  data_time: 0.0133  
2024/07/02 19:31:16 - mmengine - INFO - Iter(val) [32/84]    eta: 0:01:33  time: 1.8078  data_time: 0.0131  
2024/07/02 19:31:24 - mmengine - INFO - Iter(val) [36/84]    eta: 0:01:26  time: 1.8113  data_time: 0.0132  
2024/07/02 19:31:31 - mmengine - INFO - Iter(val) [40/84]    eta: 0:01:19  time: 1.8124  data_time: 0.0133  
2024/07/02 19:31:38 - mmengine - INFO - Iter(val) [44/84]    eta: 0:01:12  time: 1.8091  data_time: 0.0134  
2024/07/02 19:31:45 - mmengine - INFO - Iter(val) [48/84]    eta: 0:01:04  time: 1.8112  data_time: 0.0134  
2024/07/02 19:31:53 - mmengine - INFO - Iter(val) [52/84]    eta: 0:00:57  time: 1.8145  data_time: 0.0135  
2024/07/02 19:32:00 - mmengine - INFO - Iter(val) [56/84]    eta: 0:00:50  time: 1.8421  data_time: 0.0136  
2024/07/02 19:32:08 - mmengine - INFO - Iter(val) [60/84]    eta: 0:00:43  time: 1.8612  data_time: 0.0137  
2024/07/02 19:32:15 - mmengine - INFO - Iter(val) [64/84]    eta: 0:00:36  time: 1.8503  data_time: 0.0134  
2024/07/02 19:32:22 - mmengine - INFO - Iter(val) [68/84]    eta: 0:00:28  time: 1.8066  data_time: 0.0136  
2024/07/02 19:32:29 - mmengine - INFO - Iter(val) [72/84]    eta: 0:00:21  time: 1.8064  data_time: 0.0133  
2024/07/02 19:32:36 - mmengine - INFO - Iter(val) [76/84]    eta: 0:00:14  time: 1.8028  data_time: 0.0131  
2024/07/02 19:32:42 - mmengine - INFO - Iter(val) [80/84]    eta: 0:00:07  time: 1.6452  data_time: 0.0107  
2024/07/02 19:32:48 - mmengine - INFO - Iter(val) [84/84]    eta: 0:00:00  time: 1.5017  data_time: 0.0074  
2024/07/02 19:32:48 - mmengine - INFO - per class results:
2024/07/02 19:32:48 - mmengine - INFO - 
+--------+-------+-------+
| Class  |  IoU  |  Acc  |
+--------+-------+-------+
|  sky   | 66.78 | 100.0 |
| nonsky |  0.0  |  0.0  |
+--------+-------+-------+
2024/07/02 19:32:48 - mmengine - INFO - Iter(val) [84/84]    aAcc: 66.7800  mIoU: 33.3900  mAcc: 50.0000  data_time: 0.0136  time: 1.7709
2024/07/02 19:33:37 - mmengine - INFO - Iter(train) [ 8/16]  lr: 9.9996e-03  eta: 0:03:21  time: 25.1351  data_time: 0.0884  loss: 0.8424  decode.loss_ce: 0.5885  decode.acc_seg: 72.5382  aux.loss_ce: 0.2539  aux.acc_seg: 72.5382
2024/07/02 19:33:45 - mmengine - INFO - Iter(val) [ 4/84]    eta: 0:02:28  time: 1.6025  data_time: 0.0149  
2024/07/02 19:33:52 - mmengine - INFO - Iter(val) [ 8/84]    eta: 0:02:18  time: 1.7462  data_time: 0.0183  
2024/07/02 19:33:59 - mmengine - INFO - Iter(val) [12/84]    eta: 0:02:09  time: 1.7782  data_time: 0.0133  
2024/07/02 19:34:06 - mmengine - INFO - Iter(val) [16/84]    eta: 0:02:03  time: 1.8064  data_time: 0.0133  
2024/07/02 19:34:14 - mmengine - INFO - Iter(val) [20/84]    eta: 0:01:55  time: 1.8118  data_time: 0.0134  
2024/07/02 19:34:21 - mmengine - INFO - Iter(val) [24/84]    eta: 0:01:48  time: 1.7862  data_time: 0.0132  
2024/07/02 19:34:28 - mmengine - INFO - Iter(val) [28/84]    eta: 0:01:41  time: 1.7856  data_time: 0.0131  
2024/07/02 19:34:35 - mmengine - INFO - Iter(val) [32/84]    eta: 0:01:34  time: 1.8209  data_time: 0.0130  
2024/07/02 19:34:42 - mmengine - INFO - Iter(val) [36/84]    eta: 0:01:26  time: 1.8211  data_time: 0.0130  
2024/07/02 19:34:50 - mmengine - INFO - Iter(val) [40/84]    eta: 0:01:19  time: 1.7952  data_time: 0.0130  
2024/07/02 19:34:57 - mmengine - INFO - Iter(val) [44/84]    eta: 0:01:12  time: 1.7913  data_time: 0.0130  
2024/07/02 19:35:04 - mmengine - INFO - Iter(val) [48/84]    eta: 0:01:05  time: 1.7927  data_time: 0.0130  
2024/07/02 19:35:11 - mmengine - INFO - Iter(val) [52/84]    eta: 0:00:57  time: 1.8040  data_time: 0.0131  
2024/07/02 19:35:19 - mmengine - INFO - Iter(val) [56/84]    eta: 0:00:50  time: 1.8098  data_time: 0.0132  
2024/07/02 19:35:26 - mmengine - INFO - Iter(val) [60/84]    eta: 0:00:43  time: 1.7982  data_time: 0.0130  
2024/07/02 19:35:33 - mmengine - INFO - Iter(val) [64/84]    eta: 0:00:36  time: 1.7941  data_time: 0.0130  
2024/07/02 19:35:40 - mmengine - INFO - Iter(val) [68/84]    eta: 0:00:28  time: 1.8039  data_time: 0.0130  
2024/07/02 19:35:47 - mmengine - INFO - Iter(val) [72/84]    eta: 0:00:21  time: 1.7999  data_time: 0.0131  
2024/07/02 19:35:54 - mmengine - INFO - Iter(val) [76/84]    eta: 0:00:14  time: 1.7861  data_time: 0.0129  
2024/07/02 19:36:00 - mmengine - INFO - Iter(val) [80/84]    eta: 0:00:07  time: 1.6448  data_time: 0.0108  
2024/07/02 19:36:06 - mmengine - INFO - Iter(val) [84/84]    eta: 0:00:00  time: 1.5023  data_time: 0.0074  
2024/07/02 19:36:06 - mmengine - INFO - per class results:
2024/07/02 19:36:06 - mmengine - INFO - 
+--------+-------+-------+
| Class  |  IoU  |  Acc  |
+--------+-------+-------+
|  sky   | 66.78 | 100.0 |
| nonsky |  0.0  |  0.0  |
+--------+-------+-------+
2024/07/02 19:36:06 - mmengine - INFO - Iter(val) [84/84]    aAcc: 66.7800  mIoU: 33.3900  mAcc: 50.0000  data_time: 0.0132  time: 1.7651
2024/07/02 19:36:31 - mmengine - INFO - Saving checkpoint at 9 iterations
2024/07/02 19:37:04 - mmengine - INFO - Iter(val) [ 4/84]    eta: 0:02:24  time: 1.5818  data_time: 0.0142  
2024/07/02 19:37:11 - mmengine - INFO - Iter(val) [ 8/84]    eta: 0:02:15  time: 1.7162  data_time: 0.0178  
2024/07/02 19:37:18 - mmengine - INFO - Iter(val) [12/84]    eta: 0:02:08  time: 1.7723  data_time: 0.0139  
2024/07/02 19:37:25 - mmengine - INFO - Iter(val) [16/84]    eta: 0:02:01  time: 1.7857  data_time: 0.0140  
2024/07/02 19:37:32 - mmengine - INFO - Iter(val) [20/84]    eta: 0:01:54  time: 1.8031  data_time: 0.0137  
2024/07/02 19:37:40 - mmengine - INFO - Iter(val) [24/84]    eta: 0:01:47  time: 1.7998  data_time: 0.0136  
2024/07/02 19:37:47 - mmengine - INFO - Iter(val) [28/84]    eta: 0:01:40  time: 1.7930  data_time: 0.0140  
2024/07/02 19:37:54 - mmengine - INFO - Iter(val) [32/84]    eta: 0:01:33  time: 1.7904  data_time: 0.0145  
2024/07/02 19:38:01 - mmengine - INFO - Iter(val) [36/84]    eta: 0:01:26  time: 1.7845  data_time: 0.0147  
2024/07/02 19:38:09 - mmengine - INFO - Iter(val) [40/84]    eta: 0:01:19  time: 1.8196  data_time: 0.0143  
2024/07/02 19:38:16 - mmengine - INFO - Iter(val) [44/84]    eta: 0:01:11  time: 1.8141  data_time: 0.0136  
2024/07/02 19:38:23 - mmengine - INFO - Iter(val) [48/84]    eta: 0:01:04  time: 1.8099  data_time: 0.0132  
2024/07/02 19:38:30 - mmengine - INFO - Iter(val) [52/84]    eta: 0:00:57  time: 1.7721  data_time: 0.0125  
2024/07/02 19:38:37 - mmengine - INFO - Iter(val) [56/84]    eta: 0:00:50  time: 1.7721  data_time: 0.0125  
2024/07/02 19:38:44 - mmengine - INFO - Iter(val) [60/84]    eta: 0:00:42  time: 1.7727  data_time: 0.0127  
2024/07/02 19:38:51 - mmengine - INFO - Iter(val) [64/84]    eta: 0:00:35  time: 1.7763  data_time: 0.0128  
2024/07/02 19:38:58 - mmengine - INFO - Iter(val) [68/84]    eta: 0:00:28  time: 1.7801  data_time: 0.0129  
2024/07/02 19:39:06 - mmengine - INFO - Iter(val) [72/84]    eta: 0:00:21  time: 1.7963  data_time: 0.0129  
2024/07/02 19:39:13 - mmengine - INFO - Iter(val) [76/84]    eta: 0:00:14  time: 1.7918  data_time: 0.0127  
2024/07/02 19:39:18 - mmengine - INFO - Iter(val) [80/84]    eta: 0:00:07  time: 1.6308  data_time: 0.0101  
2024/07/02 19:39:24 - mmengine - INFO - Iter(val) [84/84]    eta: 0:00:00  time: 1.4880  data_time: 0.0073  
2024/07/02 19:39:24 - mmengine - INFO - per class results:
2024/07/02 19:39:24 - mmengine - INFO - 
+--------+-------+-------+
| Class  |  IoU  |  Acc  |
+--------+-------+-------+
|  sky   | 66.78 | 100.0 |
| nonsky |  0.0  |  0.0  |
+--------+-------+-------+
2024/07/02 19:39:24 - mmengine - INFO - Iter(val) [84/84]    aAcc: 66.7800  mIoU: 33.3900  mAcc: 50.0000  data_time: 0.0133  time: 1.7513
2024/07/02 19:40:14 - mmengine - INFO - Iter(train) [12/16]  lr: 9.9994e-03  eta: 0:01:40  time: 25.1805  data_time: 0.1280  loss: 0.7264  decode.loss_ce: 0.4967  decode.acc_seg: 73.5450  aux.loss_ce: 0.2297  aux.acc_seg: 73.5450
2024/07/02 19:40:14 - mmengine - INFO - Saving checkpoint at 12 iterations
2024/07/02 19:40:22 - mmengine - INFO - Iter(val) [ 4/84]    eta: 0:02:27  time: 1.5866  data_time: 0.0159  
2024/07/02 19:40:29 - mmengine - INFO - Iter(val) [ 8/84]    eta: 0:02:18  time: 1.7368  data_time: 0.0189  
2024/07/02 19:40:36 - mmengine - INFO - Iter(val) [12/84]    eta: 0:02:10  time: 1.7917  data_time: 0.0125  
2024/07/02 19:40:43 - mmengine - INFO - Iter(val) [16/84]    eta: 0:02:02  time: 1.7903  data_time: 0.0126  
2024/07/02 19:40:50 - mmengine - INFO - Iter(val) [20/84]    eta: 0:01:55  time: 1.7947  data_time: 0.0132  
2024/07/02 19:40:57 - mmengine - INFO - Iter(val) [24/84]    eta: 0:01:47  time: 1.7921  data_time: 0.0130  
2024/07/02 19:41:05 - mmengine - INFO - Iter(val) [28/84]    eta: 0:01:40  time: 1.7778  data_time: 0.0128  
2024/07/02 19:41:12 - mmengine - INFO - Iter(val) [32/84]    eta: 0:01:33  time: 1.7755  data_time: 0.0127  
2024/07/02 19:41:19 - mmengine - INFO - Iter(val) [36/84]    eta: 0:01:26  time: 1.7758  data_time: 0.0125  
2024/07/02 19:41:26 - mmengine - INFO - Iter(val) [40/84]    eta: 0:01:18  time: 1.7734  data_time: 0.0124  
2024/07/02 19:41:33 - mmengine - INFO - Iter(val) [44/84]    eta: 0:01:11  time: 1.7761  data_time: 0.0125  
2024/07/02 19:41:40 - mmengine - INFO - Iter(val) [48/84]    eta: 0:01:04  time: 1.7778  data_time: 0.0127  
2024/07/02 19:41:47 - mmengine - INFO - Iter(val) [52/84]    eta: 0:00:57  time: 1.7790  data_time: 0.0128  
2024/07/02 19:41:54 - mmengine - INFO - Iter(val) [56/84]    eta: 0:00:50  time: 1.7816  data_time: 0.0127  
2024/07/02 19:42:01 - mmengine - INFO - Iter(val) [60/84]    eta: 0:00:42  time: 1.7866  data_time: 0.0125  
2024/07/02 19:42:09 - mmengine - INFO - Iter(val) [64/84]    eta: 0:00:35  time: 1.7861  data_time: 0.0127  
2024/07/02 19:42:16 - mmengine - INFO - Iter(val) [68/84]    eta: 0:00:28  time: 1.7899  data_time: 0.0128  
2024/07/02 19:42:23 - mmengine - INFO - Iter(val) [72/84]    eta: 0:00:21  time: 1.7859  data_time: 0.0127  
2024/07/02 19:42:30 - mmengine - INFO - Iter(val) [76/84]    eta: 0:00:14  time: 1.7805  data_time: 0.0126  
2024/07/02 19:42:36 - mmengine - INFO - Iter(val) [80/84]    eta: 0:00:07  time: 1.6308  data_time: 0.0102  
2024/07/02 19:42:41 - mmengine - INFO - Iter(val) [84/84]    eta: 0:00:00  time: 1.4837  data_time: 0.0072  
2024/07/02 19:42:41 - mmengine - INFO - per class results:
2024/07/02 19:42:41 - mmengine - INFO - 
+--------+-------+-------+
| Class  |  IoU  |  Acc  |
+--------+-------+-------+
|  sky   | 93.24 | 93.78 |
| nonsky | 87.86 | 98.85 |
+--------+-------+-------+
2024/07/02 19:42:41 - mmengine - INFO - Iter(val) [84/84]    aAcc: 95.4600  mIoU: 90.5500  mAcc: 96.3100  data_time: 0.0129  time: 1.7471
2024/07/02 19:43:38 - mmengine - INFO - Iter(val) [ 4/84]    eta: 0:02:25  time: 1.5721  data_time: 0.0153  
2024/07/02 19:43:45 - mmengine - INFO - Iter(val) [ 8/84]    eta: 0:02:17  time: 1.7277  data_time: 0.0189  
2024/07/02 19:43:52 - mmengine - INFO - Iter(val) [12/84]    eta: 0:02:09  time: 1.7936  data_time: 0.0142  
2024/07/02 19:44:00 - mmengine - INFO - Iter(val) [16/84]    eta: 0:02:02  time: 1.7893  data_time: 0.0139  
2024/07/02 19:44:07 - mmengine - INFO - Iter(val) [20/84]    eta: 0:01:54  time: 1.7837  data_time: 0.0138  
2024/07/02 19:44:14 - mmengine - INFO - Iter(val) [24/84]    eta: 0:01:47  time: 1.7881  data_time: 0.0133  
2024/07/02 19:44:21 - mmengine - INFO - Iter(val) [28/84]    eta: 0:01:40  time: 1.7844  data_time: 0.0132  
2024/07/02 19:44:28 - mmengine - INFO - Iter(val) [32/84]    eta: 0:01:33  time: 1.7872  data_time: 0.0136  
2024/07/02 19:44:35 - mmengine - INFO - Iter(val) [36/84]    eta: 0:01:25  time: 1.7862  data_time: 0.0135  
2024/07/02 19:44:42 - mmengine - INFO - Iter(val) [40/84]    eta: 0:01:18  time: 1.7928  data_time: 0.0136  
2024/07/02 19:44:50 - mmengine - INFO - Iter(val) [44/84]    eta: 0:01:11  time: 1.7893  data_time: 0.0135  
2024/07/02 19:44:57 - mmengine - INFO - Iter(val) [48/84]    eta: 0:01:04  time: 1.7885  data_time: 0.0135  
2024/07/02 19:45:04 - mmengine - INFO - Iter(val) [52/84]    eta: 0:00:57  time: 1.7849  data_time: 0.0136  
2024/07/02 19:45:11 - mmengine - INFO - Iter(val) [56/84]    eta: 0:00:50  time: 1.7828  data_time: 0.0136  
2024/07/02 19:45:18 - mmengine - INFO - Iter(val) [60/84]    eta: 0:00:42  time: 1.7868  data_time: 0.0133  
2024/07/02 19:45:25 - mmengine - INFO - Iter(val) [64/84]    eta: 0:00:35  time: 1.7893  data_time: 0.0127  
2024/07/02 19:45:33 - mmengine - INFO - Iter(val) [68/84]    eta: 0:00:28  time: 1.7858  data_time: 0.0128  
2024/07/02 19:45:40 - mmengine - INFO - Iter(val) [72/84]    eta: 0:00:21  time: 1.7866  data_time: 0.0130  
2024/07/02 19:45:47 - mmengine - INFO - Iter(val) [76/84]    eta: 0:00:14  time: 1.7802  data_time: 0.0128  
2024/07/02 19:45:52 - mmengine - INFO - Iter(val) [80/84]    eta: 0:00:07  time: 1.6297  data_time: 0.0103  
2024/07/02 19:45:58 - mmengine - INFO - Iter(val) [84/84]    eta: 0:00:00  time: 1.4893  data_time: 0.0073  
2024/07/02 19:45:58 - mmengine - INFO - per class results:
2024/07/02 19:45:58 - mmengine - INFO - 
+--------+-------+-------+
| Class  |  IoU  |  Acc  |
+--------+-------+-------+
|  sky   |  90.5 |  90.7 |
| nonsky | 83.89 | 99.57 |
+--------+-------+-------+
2024/07/02 19:45:58 - mmengine - INFO - Iter(val) [84/84]    aAcc: 93.6500  mIoU: 87.2000  mAcc: 95.1300  data_time: 0.0135  time: 1.7488
2024/07/02 19:46:23 - mmengine - INFO - Saving checkpoint at 15 iterations
2024/07/02 19:46:48 - mmengine - INFO - Iter(train) [16/16]  lr: 9.9992e-03  eta: 0:00:00  time: 24.9331  data_time: 0.1128  loss: 0.5672  decode.loss_ce: 0.3736  decode.acc_seg: 93.5573  aux.loss_ce: 0.1936  aux.acc_seg: 69.5382
2024/07/02 19:46:48 - mmengine - INFO - Saving checkpoint at 16 iterations
2024/07/02 19:46:56 - mmengine - INFO - Iter(val) [ 4/84]    eta: 0:02:22  time: 1.5616  data_time: 0.0149  
2024/07/02 19:47:03 - mmengine - INFO - Iter(val) [ 8/84]    eta: 0:02:16  time: 1.7165  data_time: 0.0185  
2024/07/02 19:47:10 - mmengine - INFO - Iter(val) [12/84]    eta: 0:02:09  time: 1.7907  data_time: 0.0141  
2024/07/02 19:47:17 - mmengine - INFO - Iter(val) [16/84]    eta: 0:02:01  time: 1.7999  data_time: 0.0140  
2024/07/02 19:47:24 - mmengine - INFO - Iter(val) [20/84]    eta: 0:01:54  time: 1.7942  data_time: 0.0141  
2024/07/02 19:47:32 - mmengine - INFO - Iter(val) [24/84]    eta: 0:01:47  time: 1.7882  data_time: 0.0137  
2024/07/02 19:47:39 - mmengine - INFO - Iter(val) [28/84]    eta: 0:01:40  time: 1.7862  data_time: 0.0136  
2024/07/02 19:47:46 - mmengine - INFO - Iter(val) [32/84]    eta: 0:01:33  time: 1.7989  data_time: 0.0132  
2024/07/02 19:47:53 - mmengine - INFO - Iter(val) [36/84]    eta: 0:01:26  time: 1.8143  data_time: 0.0134  
2024/07/02 19:48:01 - mmengine - INFO - Iter(val) [40/84]    eta: 0:01:19  time: 1.8231  data_time: 0.0131  
2024/07/02 19:48:08 - mmengine - INFO - Iter(val) [44/84]    eta: 0:01:12  time: 1.8244  data_time: 0.0131  
2024/07/02 19:48:15 - mmengine - INFO - Iter(val) [48/84]    eta: 0:01:04  time: 1.8318  data_time: 0.0131  
2024/07/02 19:48:23 - mmengine - INFO - Iter(val) [52/84]    eta: 0:00:57  time: 1.8360  data_time: 0.0132  
2024/07/02 19:48:30 - mmengine - INFO - Iter(val) [56/84]    eta: 0:00:50  time: 1.8188  data_time: 0.0131  
2024/07/02 19:48:37 - mmengine - INFO - Iter(val) [60/84]    eta: 0:00:43  time: 1.8034  data_time: 0.0129  
2024/07/02 19:48:44 - mmengine - INFO - Iter(val) [64/84]    eta: 0:00:36  time: 1.8039  data_time: 0.0129  
2024/07/02 19:48:52 - mmengine - INFO - Iter(val) [68/84]    eta: 0:00:28  time: 1.8138  data_time: 0.0130  
2024/07/02 19:48:59 - mmengine - INFO - Iter(val) [72/84]    eta: 0:00:21  time: 1.8241  data_time: 0.0132  
2024/07/02 19:49:06 - mmengine - INFO - Iter(val) [76/84]    eta: 0:00:14  time: 1.8305  data_time: 0.0131  
2024/07/02 19:49:12 - mmengine - INFO - Iter(val) [80/84]    eta: 0:00:07  time: 1.6678  data_time: 0.0103  
2024/07/02 19:49:18 - mmengine - INFO - Iter(val) [84/84]    eta: 0:00:00  time: 1.5068  data_time: 0.0072  
2024/07/02 19:49:18 - mmengine - INFO - per class results:
2024/07/02 19:49:18 - mmengine - INFO - 
+--------+-------+-------+
| Class  |  IoU  |  Acc  |
+--------+-------+-------+
|  sky   | 90.74 | 90.91 |
| nonsky | 84.22 | 99.61 |
+--------+-------+-------+
2024/07/02 19:49:18 - mmengine - INFO - Iter(val) [84/84]    aAcc: 93.8000  mIoU: 87.4800  mAcc: 95.2600  data_time: 0.0133  time: 1.7691
